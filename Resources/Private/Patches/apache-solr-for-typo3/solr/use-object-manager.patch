From 0de3ead9ecaee588e307d59fc30930aab1364a56 Mon Sep 17 00:00:00 2001
From: Sascha Nowak <sascha.nowak@netlogix.de>
Date: Tue, 14 Jan 2020 23:16:44 +0100
Subject: [PATCH 1/2] [Bugfix] Use ObjectManager in QueryGroupFacetParser for
 creating new options

---
 .../Facets/OptionBased/QueryGroup/QueryGroupFacetParser.php     | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/Classes/Domain/Search/ResultSet/Facets/OptionBased/QueryGroup/QueryGroupFacetParser.php b/Classes/Domain/Search/ResultSet/Facets/OptionBased/QueryGroup/QueryGroupFacetParser.php
index 0da3f4655..d0a8fd854 100644
--- a/Classes/Domain/Search/ResultSet/Facets/OptionBased/QueryGroup/QueryGroupFacetParser.php
+++ b/Classes/Domain/Search/ResultSet/Facets/OptionBased/QueryGroup/QueryGroupFacetParser.php
@@ -81,7 +81,7 @@ public function parse(SearchResultSet $resultSet, $facetName, array $facetConfig
                     $facetName,
                     $facetConfiguration
                 );
-                $facet->addOption(new Option($facet, $label, $value, $count, $isOptionsActive));
+                $facet->addOption($this->objectManager->get(Option::class, $facet, $label, $value, $count, $isOptionsActive));
             }
         }


From cc0d8db0c89b5dac248284a1ceec78fd595e3cbe Mon Sep 17 00:00:00 2001
From: Sascha Nowak <sascha.nowak@netlogix.de>
Date: Tue, 14 Jan 2020 23:20:59 +0100
Subject: [PATCH 2/2] [Bugfix] Use ObjectManager to create new facets options

---
 .../Search/ResultSet/Facets/AbstractFacet.php     | 15 +++++++++++++++
 .../OptionBased/Hierarchy/HierarchyFacet.php      |  3 ++-
 .../OptionBased/Options/OptionsFacetParser.php    |  2 +-
 .../RangeBased/AbstractRangeFacetParser.php       |  4 ++--
 .../ResultSetReconstitutionProcessor.php          |  2 +-
 5 files changed, 21 insertions(+), 5 deletions(-)

diff --git a/Classes/Domain/Search/ResultSet/Facets/AbstractFacet.php b/Classes/Domain/Search/ResultSet/Facets/AbstractFacet.php
index 75098c6ce..4e3110e74 100644
--- a/Classes/Domain/Search/ResultSet/Facets/AbstractFacet.php
+++ b/Classes/Domain/Search/ResultSet/Facets/AbstractFacet.php
@@ -74,6 +74,11 @@ abstract class AbstractFacet
      */
     protected $allRequirementsMet = true;

+    /**
+     * @var \TYPO3\CMS\Extbase\Object\ObjectManagerInterface
+     */
+    protected $objectManager;
+
     /**
      * AbstractFacet constructor.
      *
@@ -92,6 +97,16 @@ public function __construct(SearchResultSet $resultSet, $name, $field, $label =
         $this->configuration = $configuration;
     }

+    /**
+     * Injects the object manager
+     *
+     * @param \TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager
+     */
+    public function injectObjectManager(\TYPO3\CMS\Extbase\Object\ObjectManagerInterface $objectManager)
+    {
+        $this->objectManager = $objectManager;
+    }
+
     /**
      * Get name
      *
diff --git a/Classes/Domain/Search/ResultSet/Facets/OptionBased/Hierarchy/HierarchyFacet.php b/Classes/Domain/Search/ResultSet/Facets/OptionBased/Hierarchy/HierarchyFacet.php
index 71d3df267..fb823ed8c 100644
--- a/Classes/Domain/Search/ResultSet/Facets/OptionBased/Hierarchy/HierarchyFacet.php
+++ b/Classes/Domain/Search/ResultSet/Facets/OptionBased/Hierarchy/HierarchyFacet.php
@@ -96,7 +96,8 @@ public function createNode($parentKey, $key, $label, $value, $count, $selected)
     {
         /** @var $parentNode Node|null */
         $parentNode = isset($this->nodesByKey[$parentKey]) ? $this->nodesByKey[$parentKey] : null;
-        $node = new Node($this, $parentNode, $key, $label, $value, $count, $selected);
+        /** @var Node $node */
+        $node = $this->objectManager->get(Node::class, $this, $parentNode, $key, $label, $value, $count, $selected);
         $this->nodesByKey[$key] = $node;

         if ($parentNode === null) {
diff --git a/Classes/Domain/Search/ResultSet/Facets/OptionBased/Options/OptionsFacetParser.php b/Classes/Domain/Search/ResultSet/Facets/OptionBased/Options/OptionsFacetParser.php
index 28517760a..fb3157541 100644
--- a/Classes/Domain/Search/ResultSet/Facets/OptionBased/Options/OptionsFacetParser.php
+++ b/Classes/Domain/Search/ResultSet/Facets/OptionBased/Options/OptionsFacetParser.php
@@ -70,7 +70,7 @@ public function parse(SearchResultSet $resultSet, $facetName, array $facetConfig

             $isOptionsActive = in_array($optionsValue, $optionsFromRequest);
             $label = $this->getLabelFromRenderingInstructions($optionsValue, $count, $facetName, $facetConfiguration);
-            $facet->addOption(new Option($facet, $label, $optionsValue, $count, $isOptionsActive, $metricsFromSolrResponse[$optionsValue]));
+            $facet->addOption($this->objectManager->get(Option::class, $facet, $label, $optionsValue, $count, $isOptionsActive, $metricsFromSolrResponse[$optionsValue]));
         }

         // after all options have been created we apply a manualSortOrder if configured
diff --git a/Classes/Domain/Search/ResultSet/Facets/RangeBased/AbstractRangeFacetParser.php b/Classes/Domain/Search/ResultSet/Facets/RangeBased/AbstractRangeFacetParser.php
index 371e2c1b3..2cc233aea 100644
--- a/Classes/Domain/Search/ResultSet/Facets/RangeBased/AbstractRangeFacetParser.php
+++ b/Classes/Domain/Search/ResultSet/Facets/RangeBased/AbstractRangeFacetParser.php
@@ -65,7 +65,7 @@ protected function getParsedFacet(SearchResultSet $resultSet, $facetName, array

             foreach ($countsFromResponse as $rangeCountValue => $count) {
                 $rangeCountValue = $this->parseResponseValue($rangeCountValue);
-                $rangeCount = new $facetRangeCountClass($rangeCountValue, $count);
+                $rangeCount = $this->objectManager->get($facetRangeCountClass, $rangeCountValue, $count);
                 $rangeCounts[] = $rangeCount;
                 $allCount += $count;
             }
@@ -87,7 +87,7 @@ protected function getParsedFacet(SearchResultSet $resultSet, $facetName, array
             $type = isset($facetConfiguration['type']) ? $facetConfiguration['type'] : 'numericRange';
             $gap = isset($facetConfiguration[$type . '.']['gap']) ? $facetConfiguration[$type . '.']['gap'] : 1;

-            $range = new $facetItemClass($facet, $from, $to, $fromInResponse, $toInResponse, $gap, $allCount, $rangeCounts, true);
+            $range = $this->objectManager->get($facetItemClass, $facet, $from, $to, $fromInResponse, $toInResponse, $gap, $allCount, $rangeCounts, true);
             $facet->setRange($range);
         }

diff --git a/Classes/Domain/Search/ResultSet/ResultSetReconstitutionProcessor.php b/Classes/Domain/Search/ResultSet/ResultSetReconstitutionProcessor.php
index 8a5995d9b..d5a6a3f24 100644
--- a/Classes/Domain/Search/ResultSet/ResultSetReconstitutionProcessor.php
+++ b/Classes/Domain/Search/ResultSet/ResultSetReconstitutionProcessor.php
@@ -126,7 +126,7 @@ protected function parseSortingIntoObjects(SearchResultSet $resultSet)

             $isResetOption = $field === 'relevance';
             // @todo allow stdWrap on label
-            $sorting = new Sorting($resultSet, $sortingName, $field, $direction, $label, $selected, $isResetOption);
+            $sorting = $this->getObjectManager()->get(Sorting::class, $resultSet, $sortingName, $field, $direction, $label, $selected, $isResetOption);
             $resultSet->addSorting($sorting);
         }

